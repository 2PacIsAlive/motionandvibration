"use strict";
/***************************************************************************************************************************
 * @license                                                                                                                *
 * Copyright 2017 Coinbase, Inc.                                                                                           *
 *                                                                                                                         *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance          *
 * with the License. You may obtain a copy of the License at                                                               *
 *                                                                                                                         *
 * http://www.apache.org/licenses/LICENSE-2.0                                                                              *
 *                                                                                                                         *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on     *
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the                      *
 * License for the specific language governing permissions and limitations under the License.                              *
 ***************************************************************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
const BookBuilder_1 = require("../../lib/BookBuilder");
const PoloniexCommon_1 = require("./PoloniexCommon");
const utils_1 = require("../utils");
const Logger_1 = require("../../utils/Logger");
const types_1 = require("../../lib/types");
const superAgent = require("superagent");
/**
 * An adapter class that maps the standardized API calls to Polinex's API interface
 */
class PoloniexExchangeAPI {
    static product(gdaxProduct) {
        return PoloniexCommon_1.PRODUCT_MAP[gdaxProduct] || gdaxProduct;
    }
    constructor(config) {
        this.owner = 'Poloniex';
        this.auth = config.auth || null;
        this.logger = config.logger || Logger_1.ConsoleLoggerFactory();
    }
    loadProducts() {
        const req = this.publicRequest('returnTicker');
        return utils_1.handleResponse(req, null).then((tickers) => {
            const products = Object.keys(tickers);
            const productList = products.map(PoloniexCommon_1.gdaxifyProduct);
            return Promise.resolve(productList);
        });
    }
    placeOrder(order) {
        return undefined;
    }
    cancelOrder(id) {
        return undefined;
    }
    cancelAllOrders() {
        return undefined;
    }
    loadOrder(id) {
        return undefined;
    }
    loadAllOrders(gdaxProduct) {
        return undefined;
    }
    loadBalances() {
        const req = this.authRequest('returnCompleteBalances', { account: 'all' });
        return utils_1.handleResponse(req, {
            owner: this.owner,
            req: 'returnBalances'
        }).then((balances) => {
            const result = {
                exchange: {}
            };
            for (const currency in balances) {
                const balance = balances[currency];
                const available = types_1.Big(balance.available);
                const total = available.plus(balance.onOrders);
                // TODO include other accounts
                result.exchange[currency] = { balance: total, available: available };
            }
            return result;
        });
    }
    requestCryptoAddress(cur) {
        return undefined;
    }
    requestTransfer(request) {
        return undefined;
    }
    requestWithdrawal(request) {
        return undefined;
    }
    transfer(cur, amount, from, to, options) {
        return undefined;
    }
    loadMidMarketPrice(gdaxProduct) {
        const req = this.publicRequest('returnTicker');
        return utils_1.handleResponse(req, {
            owner: this.owner,
            req: 'returnTicker'
        }).then((tickers) => {
            const ticker = tickers[PoloniexExchangeAPI.product(gdaxProduct)];
            return types_1.Big(ticker.lowestAsk).plus(ticker.highestBid).times(0.5);
        });
    }
    loadOrderbook(gdaxProduct) {
        const product = PoloniexExchangeAPI.product(gdaxProduct);
        const req = this.publicRequest('returnOrderBook', { currencyPair: product });
        return utils_1.handleResponse(req, {
            owner: this.owner,
            req: 'returnOrderBook',
            product: product
        }).then((book) => {
            const builder = new BookBuilder_1.BookBuilder(this.logger);
            let order;
            book.asks.forEach((level) => {
                order = {
                    id: level[0].toString(),
                    side: 'sell',
                    price: types_1.Big(level[0]),
                    size: types_1.Big(level[1])
                };
                builder.add(order);
            });
            book.bids.forEach((level) => {
                order = {
                    id: level[0].toString(),
                    side: 'buy',
                    price: types_1.Big(level[0]),
                    size: types_1.Big(level[1])
                };
                builder.add(order);
            });
            return builder;
        });
    }
    loadTicker(gdaxProduct) {
        const product = PoloniexExchangeAPI.product(gdaxProduct);
        const req = this.publicRequest('returnTicker');
        return utils_1.handleResponse(req, {
            owner: this.owner,
            req: 'returnTicker'
        }).then((tickers) => {
            const ticker = tickers[product];
            return {
                productId: gdaxProduct,
                price: types_1.Big(ticker.last),
                bid: types_1.Big(ticker.highestBid),
                ask: types_1.Big(ticker.lowestAsk),
                volume: types_1.Big(ticker.baseVolume),
                time: new Date()
            };
        });
    }
    publicRequest(command, params) {
        const url = `${PoloniexCommon_1.POLONIEX_API_URL}?command=${command}`;
        return superAgent.get(url).query(params).accept('json');
    }
    authRequest(command, params) {
        if (!this.auth) {
            return null;
        }
        const nonce = new Date().valueOf();
        const url = `${PoloniexCommon_1.POLONIEX_API_URL}?command=${command}&nonce=${nonce}`;
        const body = Object.assign({ command: command, nonce: nonce }, params);
        const signature = utils_1.getSignature(this.auth, JSON.stringify(body), 'sha512');
        return superAgent.post(url)
            .set({
            Key: this.auth.key,
            Sign: signature
        })
            .send(body)
            .accept('json');
    }
}
exports.PoloniexExchangeAPI = PoloniexExchangeAPI;
//# sourceMappingURL=PoloniexExchangeAPI.js.map